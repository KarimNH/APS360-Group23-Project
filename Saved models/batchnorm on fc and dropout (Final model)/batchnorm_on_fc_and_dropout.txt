class EEG_CNNc(nn.Module): # highest precision + recall 
    def __init__(self, name="EEG_CNNc"):
        super(EEG_CNNc,self).__init__()

        self.name=name

        self.conv1 = nn.Conv2d(1, 32, kernel_size = (3, 3), padding=(1))
        self.bn1 = nn.BatchNorm2d(32)  # Batch normalization after conv1
        self.conv2 = nn.Conv2d(32, 64, kernel_size = (3, 3), padding=(1))
        self.bn2 = nn.BatchNorm2d(64)  # Batch normalization after conv2
        self.conv3 = nn.Conv2d(64, 128, kernel_size = (3, 3), padding=(1))  # Additional convolutional layer
        self.bn3 = nn.BatchNorm2d(128)  # Batch normalization after conv3
        self.pool = nn.MaxPool2d(2,2)
        self.dropout = nn.Dropout(0.3)  # Dropout for regularization

        # Adjust dimensions for fully connected layers
        # Update dimensions based on the output size from the conv layers
        self.fc1 = nn.Linear(128*2*1, 64)  # Adjusted based on conv3 and pooling layers
        self.bn4 = nn.BatchNorm1d(64)
        self.fc2 = nn.Linear(64, 32)
        self.bn5 = nn.BatchNorm1d(32)
        self.fc3 = nn.Linear(32, 2)  # Additional fully connected layer

    def forward(self, x):
        x = self.pool(F.relu(self.bn1(self.conv1(x))))  # Add batch norm after conv1
        x = self.pool(F.relu(self.bn2(self.conv2(x))))  # Add batch norm after conv2
        x = self.pool(F.relu(self.bn3(self.conv3(x))))  # Add conv3 and batch norm

        x = x.view(-1, 128*2*1)  # Flatten layer, adjust based on conv3 and pooling layers
        x = self.dropout(F.relu(self.bn4(self.fc1(x))))  # Add BN before activation and dropout after activation
        x = self.dropout(F.relu(self.bn5(self.fc2(x))))  # Add BN before activation and dropout after activation

        x = self.fc3(x)  # Additional fully connected layer
        return x