class EEG_CNN(nn.Module):
    def __init__(self, name="EEG_CNN"):
        super(EEG_CNN,self).__init__()
        
        self.name=name
        
        self.conv1 = nn.Conv2d(1, 32, kernel_size = (3, 3), padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size = (3, 3), padding=1)
        self.pool = nn.MaxPool2d(2,2)

        # Adjust dimensions for fully connected layers
        self.fc1 = nn.Linear(64*5*2, 10)  # self.fc1 = nn.Linear(64*5*2, 10)
        self.fc2 = nn.Linear(10, 2)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x))) # output dimensions: [32, 11, 4]
        # print(x.size())
        x = self.pool(F.relu(self.conv2(x))) # output dimensions: [64, 5, 2]
        # print(x.size())
        x = x.view(-1, 64*5*2) # flatten layer x.view(-1, 64*5*2) (-1, 64,23,9) x.view(x.size(0), -1)
        # print(x.size())
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        # print(x.size())
        return x